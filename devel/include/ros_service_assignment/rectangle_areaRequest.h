// Generated by gencpp from file ros_service_assignment/rectangle_areaRequest.msg
// DO NOT EDIT!


#ifndef ROS_SERVICE_ASSIGNMENT_MESSAGE_RECTANGLE_AREAREQUEST_H
#define ROS_SERVICE_ASSIGNMENT_MESSAGE_RECTANGLE_AREAREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_service_assignment
{
template <class ContainerAllocator>
struct rectangle_areaRequest_
{
  typedef rectangle_areaRequest_<ContainerAllocator> Type;

  rectangle_areaRequest_()
    : l(0.0)
    , w(0.0)  {
    }
  rectangle_areaRequest_(const ContainerAllocator& _alloc)
    : l(0.0)
    , w(0.0)  {
  (void)_alloc;
    }



   typedef float _l_type;
  _l_type l;

   typedef float _w_type;
  _w_type w;





  typedef boost::shared_ptr< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> const> ConstPtr;

}; // struct rectangle_areaRequest_

typedef ::ros_service_assignment::rectangle_areaRequest_<std::allocator<void> > rectangle_areaRequest;

typedef boost::shared_ptr< ::ros_service_assignment::rectangle_areaRequest > rectangle_areaRequestPtr;
typedef boost::shared_ptr< ::ros_service_assignment::rectangle_areaRequest const> rectangle_areaRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator1> & lhs, const ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator2> & rhs)
{
  return lhs.l == rhs.l &&
    lhs.w == rhs.w;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator1> & lhs, const ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_service_assignment

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73811226180668ce91b41770628c63aa";
  }

  static const char* value(const ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73811226180668ceULL;
  static const uint64_t static_value2 = 0x91b41770628c63aaULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_service_assignment/rectangle_areaRequest";
  }

  static const char* value(const ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 l\n"
"float32 w\n"
"\n"
;
  }

  static const char* value(const ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.l);
      stream.next(m.w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rectangle_areaRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_service_assignment::rectangle_areaRequest_<ContainerAllocator>& v)
  {
    s << indent << "l: ";
    Printer<float>::stream(s, indent + "  ", v.l);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SERVICE_ASSIGNMENT_MESSAGE_RECTANGLE_AREAREQUEST_H
